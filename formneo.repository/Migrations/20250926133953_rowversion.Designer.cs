// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using vesa.repository;

#nullable disable

namespace formneo.repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926133953_rowversion")]
    partial class rowversion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.ApproveItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApproveUser")
                        .HasColumnType("text");

                    b.Property<string>("ApproveUserNameSurname")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedUser_Runtime")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedUser_RuntimeNameSurname")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedUser_RuntimeNote")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedUser_RuntimeNumberManDay")
                        .HasColumnType("text");

                    b.Property<int>("ApproverStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkFlowDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkflowItemId");

                    b.ToTable("ApproveItems");
                });

            modelBuilder.Entity("vesa.core.Models.AspNetRolesMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("MenuId", "RoleId")
                        .IsUnique();

                    b.ToTable("AspNetRolesMenu");
                });

            modelBuilder.Entity("vesa.core.Models.AspNetRolesTenantMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanAdd")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "MenuId", "RoleId")
                        .IsUnique();

                    b.ToTable("AspNetRolesTenantMenu");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetJobCodeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cust_AdinesStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_Bolum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_GorevBirimTipi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_Haykademe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Cust_IsManager")
                        .HasColumnType("boolean");

                    b.Property<string>("Cust_Jobcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_Joblevelgroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_Metin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cust_Ronesanskademe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultEmployeeClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description_En_Debug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description_En_US")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description_Ru_RU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description_Tr_TR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFulltimeEmployee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSend")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobFunction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_En_Debug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_En_US")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Ru_RU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name_Tr_TR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PositionLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegularTemporary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkflowHeadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkflowHeadId");

                    b.ToTable("BudgetJobCodeRequest");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetNormCodeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Hardware")
                        .HasColumnType("text");

                    b.Property<int?>("InternalEmploymentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInternalSource")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSend")
                        .HasColumnType("boolean");

                    b.Property<string>("Licence")
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int?>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkflowHeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("businessUnit")
                        .HasColumnType("text");

                    b.Property<string>("changeReason")
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<string>("costCenter")
                        .HasColumnType("text");

                    b.Property<bool?>("cust_ChiefPosition")
                        .HasColumnType("boolean");

                    b.Property<string>("cust_EmpGroup")
                        .HasColumnType("text");

                    b.Property<string>("cust_GeoZone")
                        .HasColumnType("text");

                    b.Property<string>("cust_HayKademe")
                        .HasColumnType("text");

                    b.Property<DateTime?>("cust_IseBaslamaTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("cust_PlanlananIseGiris")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("cust_actualhiredate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cust_calismaYeriTuru")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("cust_company")
                        .HasColumnType("text");

                    b.Property<string>("cust_companyGroup")
                        .HasColumnType("text");

                    b.Property<string>("cust_customlegalEntity")
                        .HasColumnType("text");

                    b.Property<string>("cust_empSubGroup")
                        .HasColumnType("text");

                    b.Property<string>("cust_isAlani")
                        .HasColumnType("text");

                    b.Property<string>("cust_jobfunction")
                        .HasColumnType("text");

                    b.Property<string>("cust_locationGroup")
                        .HasColumnType("text");

                    b.Property<string>("cust_parentDepartment")
                        .HasColumnType("text");

                    b.Property<string>("cust_parentDepartment2")
                        .HasColumnType("text");

                    b.Property<string>("cust_payGroup")
                        .HasColumnType("text");

                    b.Property<string>("cust_phisicalLocation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("cust_plannedEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cust_ronesansKademe")
                        .HasColumnType("text");

                    b.Property<string>("cust_ronesansjoblevel")
                        .HasColumnType("text");

                    b.Property<string>("cust_sub_division")
                        .HasColumnType("text");

                    b.Property<string>("cust_ticket")
                        .HasColumnType("text");

                    b.Property<string>("department")
                        .HasColumnType("text");

                    b.Property<string>("division")
                        .HasColumnType("text");

                    b.Property<DateTime?>("effectiveStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("effectiveStatus")
                        .HasColumnType("text");

                    b.Property<string>("employeeClass")
                        .HasColumnType("text");

                    b.Property<string>("externalName_defaultValue")
                        .HasColumnType("text");

                    b.Property<string>("externalName_en_DEBUG")
                        .HasColumnType("text");

                    b.Property<string>("externalName_en_US")
                        .HasColumnType("text");

                    b.Property<string>("externalName_ru_RU")
                        .HasColumnType("text");

                    b.Property<string>("externalName_tr_TR")
                        .HasColumnType("text");

                    b.Property<string>("internalSourceEmp")
                        .HasColumnType("text");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTransferred")
                        .HasColumnType("boolean");

                    b.Property<string>("jobCode")
                        .HasColumnType("text");

                    b.Property<string>("jobCodeDescription")
                        .HasColumnType("text");

                    b.Property<string>("jobTitle")
                        .HasColumnType("text");

                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<bool?>("multipleIncumbentsAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("parentPosition")
                        .HasColumnType("text");

                    b.Property<string>("payGrade")
                        .HasColumnType("text");

                    b.Property<string>("promotionPeriod")
                        .HasColumnType("text");

                    b.Property<string>("promotionPeriodTxt")
                        .HasColumnType("text");

                    b.Property<string>("propotionReasonTxt")
                        .HasColumnType("text");

                    b.Property<string>("relationEmployess")
                        .HasColumnType("text");

                    b.Property<string>("relationManager")
                        .HasColumnType("text");

                    b.Property<string>("standardHours")
                        .HasColumnType("text");

                    b.Property<string>("targetFTE")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<bool?>("vacant")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkflowHeadId");

                    b.ToTable("BudgetNormCodeRequest");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetPeriodUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BudgetPeriodCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("nameSurname")
                        .HasColumnType("text");

                    b.Property<int>("permission")
                        .HasColumnType("integer");

                    b.Property<int>("processType")
                        .HasColumnType("integer");

                    b.Property<int>("requestType")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BudgetPeriodCode");

                    b.HasIndex("MainClientId");

                    b.ToTable("BudgetPeriodUser");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetPromotionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSend")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("TeamUsers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkflowHeadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkflowHeadId");

                    b.ToTable("BudgetPromotionRequest");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetPeriod", b =>
                {
                    b.Property<string>("PeriodCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PeriodCode");

                    b.HasIndex("MainClientId");

                    b.ToTable("BudgetPeriod");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpportunityId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CrmChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CrmChangeLogs");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CompanyType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceCustomer")
                        .HasColumnType("boolean");

                    b.Property<string>("LegalName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("LifecycleStage")
                        .HasColumnType("integer");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("LogoFilePath")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("NextActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TwitterUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("MainClientId", "Code")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultShipping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShipping")
                        .HasColumnType("boolean");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerCustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerCustomFields");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Bulk")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<bool>("Notify")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerEmails");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerNotes");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerOfficial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("KvkkConsent")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerSector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerSectors");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasDefaultValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("CustomerTags");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttendeesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Probability")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QuoteNo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("numeric");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("MainClientId", "QuoteNo")
                        .IsUnique();

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.QuoteLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteLines");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RemindAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.SpecialDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdvanceNotifyDays")
                        .HasColumnType("integer");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnnual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MainClientId");

                    b.ToTable("SpecialDays");
                });

            modelBuilder.Entity("vesa.core.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bf2fc2e-0e25-46a8-aa96-8f1480331b5b"),
                            ClientId = new Guid("77df6fbd-4160-4cea-8f24-96564b54e5ac"),
                            CreatedDate = new DateTime(2025, 9, 26, 13, 39, 52, 751, DateTimeKind.Utc).AddTicks(2320),
                            Name = "RonesansHolding"
                        });
                });

            modelBuilder.Entity("vesa.core.Models.Departments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.EmpSalary", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EmployeeId", "StartDate", "EndDate");

                    b.HasIndex("MainClientId");

                    b.ToTable("EmpSalary", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BankIBAN")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string>("CitizenshipNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DepartmentsId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("DeptCode")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerPersId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("OfficialBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PersId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("RelatedPerson")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SecondManagerPersId")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WorkendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Workstartdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("illness")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("MainClientId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FormCategory")
                        .HasColumnType("integer");

                    b.Property<string>("FormDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormDesign")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormPriority")
                        .HasColumnType("integer");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("JavaScriptCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentFormId")
                        .HasColumnType("uuid");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<bool>("ShowInMenu")
                        .HasColumnType("boolean");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkFlowDefinationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowDefinationId")
                        .IsUnique();

                    b.HasIndex("MainClientId", "WorkFlowDefinationId")
                        .IsUnique();

                    b.ToTable("Form", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.FormAssign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FormRunTimeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("UserAppId");

                    b.ToTable("FormAssign");
                });

            modelBuilder.Entity("vesa.core.Models.FormAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserIdsSerialized")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("MainClientId");

                    b.ToTable("FormAuth");
                });

            modelBuilder.Entity("vesa.core.Models.FormRuleEngine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Rulejson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkFlowDefinationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkFlowDefinationId");

                    b.ToTable("FormRuleEngine");
                });

            modelBuilder.Entity("vesa.core.Models.FormRuntime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValuesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValuesJsonData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("İsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("MainClientId");

                    b.ToTable("FormRuntime");
                });

            modelBuilder.Entity("vesa.core.Models.Inventory.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("text");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("CPU")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DiskSize")
                        .HasColumnType("integer");

                    b.Property<int?>("DiskType")
                        .HasColumnType("integer");

                    b.Property<string>("GPU")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceOrVendor")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MACAddress")
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int?>("OS_LicenseStatus")
                        .HasColumnType("integer");

                    b.Property<string>("OfficeLicense")
                        .HasColumnType("text");

                    b.Property<int?>("OfficeLocation")
                        .HasColumnType("integer");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QRorBarcode")
                        .HasColumnType("text");

                    b.Property<int?>("RAM")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("StaticIPAddress")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TicketDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketDepartmentId");

                    b.HasIndex("UserAppId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("vesa.core.Models.Lookup.LookupCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenantScoped")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "Key", "TenantId")
                        .IsUnique();

                    b.HasIndex("TenantId", "ModuleId", "Key")
                        .IsUnique();

                    b.ToTable("LookupCategories");
                });

            modelBuilder.Entity("vesa.core.Models.Lookup.LookupItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NameLocalizedJson")
                        .HasColumnType("text");

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "Code", "TenantId")
                        .IsUnique();

                    b.HasIndex("TenantId", "CategoryId", "Code")
                        .IsUnique();

                    b.ToTable("LookupItems");
                });

            modelBuilder.Entity("vesa.core.Models.Lookup.LookupModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenantScoped")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("LookupModules");
                });

            modelBuilder.Entity("vesa.core.Models.MainClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomDomain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("DomainVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FeatureFlags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<string>("Quotas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("SsoMetadataUrl")
                        .HasColumnType("text");

                    b.Property<int?>("SsoType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77df6fbd-4160-4cea-8f24-96564b54e5ac"),
                            CreatedDate = new DateTime(2025, 9, 26, 13, 39, 52, 751, DateTimeKind.Utc).AddTicks(3050),
                            DomainVerified = false,
                            Email = "info@vesacons.com",
                            FeatureFlags = "{}",
                            IsActive = true,
                            Name = "RonesansHolding",
                            PhoneNumber = "5069112452",
                            Plan = 0,
                            Quotas = "{}",
                            Status = 0,
                            Timezone = "Europe/Istanbul"
                        });
                });

            modelBuilder.Entity("vesa.core.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Href")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTenantOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Route")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("ShowMenu")
                        .HasColumnType("boolean");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("vesa.core.Models.NewFolder.Kanban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RankId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("MainClientId");

                    b.ToTable("Kanban");
                });

            modelBuilder.Entity("vesa.core.Models.PCTracking.PCTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProcessName")
                        .HasColumnType("text");

                    b.Property<int?>("LoginType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("PCname")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SubjectLoginId")
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("XmlData")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.ToTable("PCTrack");
                });

            modelBuilder.Entity("vesa.core.Models.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Plant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0779dd43-6047-400d-968d-e6f1b0c3b286"),
                            CompanyId = new Guid("1bf2fc2e-0e25-46a8-aa96-8f1480331b5b"),
                            CreatedDate = new DateTime(2025, 9, 26, 13, 39, 52, 751, DateTimeKind.Utc).AddTicks(3130),
                            Name = "RonesansHoldingTurkey"
                        });
                });

            modelBuilder.Entity("vesa.core.Models.Positions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerRefId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("MainClientId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("vesa.core.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectGain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectLearn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectTags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("vesa.core.Models.ProjectCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.ToTable("ProjectCategories");
                });

            modelBuilder.Entity("vesa.core.Models.ProjectTasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Milestone")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("Predecessor")
                        .HasColumnType("text");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserIds")
                        .HasColumnType("text");

                    b.Property<int?>("taskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("vesa.core.Models.RoleTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("RoleId", "TenantId")
                        .IsUnique();

                    b.ToTable("RoleTenants", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.TaskManagement.UserCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerRefId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Percentage")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WorkLocation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("UserAppId");

                    b.ToTable("UserCalendar");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.DepartmentUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketDepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentUsers");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketApprove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketsId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketsId")
                        .IsUnique();

                    b.HasIndex("UserAppId");

                    b.HasIndex("MainClientId", "TicketsId")
                        .IsUnique();

                    b.ToTable("TicketApprove");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketAssigne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TicketTeamID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketsId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("TicketTeamID");

                    b.HasIndex("TicketsId")
                        .IsUnique();

                    b.HasIndex("UserAppId");

                    b.HasIndex("MainClientId", "TicketsId")
                        .IsUnique();

                    b.ToTable("TicketAssigne");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketComment");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeparmentCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisibleInList")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.HasIndex("WorkCompanyId");

                    b.ToTable("TicketDepartment");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Base64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketCommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketCommentId");

                    b.ToTable("TicketFile");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketNotifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserAppId");

                    b.ToTable("TicketNotifications");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketRuleEngine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("RuleJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.Property<int>("createEnvironment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.ToTable("TicketRuleEngine");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("WorkCompanyId");

                    b.ToTable("TicketTeam");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketTeamUserApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TicketTeamId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserAppId");

                    b.HasIndex("TicketTeamId", "UserAppId")
                        .IsUnique();

                    b.HasIndex("MainClientId", "TicketTeamId", "UserAppId")
                        .IsUnique();

                    b.ToTable("TicketTeamUserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.Tickets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AddedMailAddresses")
                        .HasColumnType("text");

                    b.Property<int>("ApproveStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CustomerRefId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFilePath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("MailConversationId")
                        .HasColumnType("text");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TicketApproveId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TicketAssigneId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("TicketDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TicketProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("TicketSLA")
                        .HasColumnType("integer");

                    b.Property<int>("TicketSubject")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkCompanySystemInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowHeadId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("isTeam")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("MainClientId");

                    b.HasIndex("TicketDepartmentId");

                    b.HasIndex("TicketProjectId");

                    b.HasIndex("UserAppId");

                    b.HasIndex("WorkCompanyId");

                    b.HasIndex("WorkCompanySystemInfoId");

                    b.HasIndex("WorkflowHeadId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("vesa.core.Models.TicketProjects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportsUrl")
                        .HasColumnType("text");

                    b.Property<string>("Risks")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SubProjectName")
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserIds")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectCategoryId");

                    b.HasIndex("WorkCompanyId");

                    b.ToTable("TicketProjects");
                });

            modelBuilder.Entity("vesa.core.Models.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FormAuthId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ResetCodeExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("text");

                    b.Property<string>("SAPDepartmentText")
                        .HasColumnType("text");

                    b.Property<string>("SAPPositionText")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("TicketDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("UserLevel")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("canSsoLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("isSystemAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTestData")
                        .HasColumnType("boolean");

                    b.Property<string>("photo")
                        .HasColumnType("text");

                    b.Property<string>("profileInfo")
                        .HasColumnType("text");

                    b.Property<bool>("vacationMode")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("FormAuthId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.HasIndex("TicketDepartmentId");

                    b.HasIndex("WorkCompanyId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("vesa.core.Models.UserTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DontApplyDefaultFilters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasDepartmentPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasOtherCompanyPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasOtherDeptCalendarPerm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasTicketPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("PCname")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("canEditTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("mainManagerUserAppId")
                        .HasColumnType("uuid");

                    b.Property<string>("manager1")
                        .HasColumnType("text");

                    b.Property<string>("manager2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "TenantId")
                        .IsUnique();

                    b.ToTable("UserTenants", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.UserTenantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleTenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleTenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "RoleTenantId")
                        .IsUnique();

                    b.ToTable("UserTenantRoles");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApproveWorkDesign")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAppId")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkCompanyTicketMatrisId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkFlowDefinationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkCompanyTicketMatrisId");

                    b.HasIndex("WorkFlowDefinationId");

                    b.ToTable("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompanySystemInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WorkCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkCompanyId");

                    b.ToTable("WorkCompanySystemInfo");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompanyTicketMatris", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FromCompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("ToCompaniesIdsSerialized")
                        .HasColumnType("text");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FromCompanyId");

                    b.HasIndex("MainClientId");

                    b.ToTable("WorkCompanyTicketMatris");
                });

            modelBuilder.Entity("vesa.core.Models.WorkFlowDefination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.ToTable("WorkFlowDefination");
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowHead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentNodeId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentNodeName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkFlowDefinationId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkFlowDefinationJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkFlowInfo")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text");

                    b.Property<int?>("workFlowStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkFlowDefinationId");

                    b.ToTable("WorkflowHead", (string)null);
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainClientId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("NodeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<int>("UniqNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UniqNumber"));

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("WorkflowHeadId")
                        .HasColumnType("uuid");

                    b.Property<int>("workFlowNodeStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainClientId");

                    b.HasIndex("WorkflowHeadId");

                    b.ToTable("WorkflowItem", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("vesa.core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("vesa.core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("vesa.core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vesa.core.Models.ApproveItems", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkflowItem", "WorkflowItem")
                        .WithMany("approveItems")
                        .HasForeignKey("WorkflowItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("WorkflowItem");
                });

            modelBuilder.Entity("vesa.core.Models.AspNetRolesMenu", b =>
                {
                    b.HasOne("vesa.core.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("vesa.core.Models.AspNetRolesTenantMenu", b =>
                {
                    b.HasOne("vesa.core.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetJobCodeRequest", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkflowHead", "WorkflowHead")
                        .WithMany()
                        .HasForeignKey("WorkflowHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkflowHead");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetNormCodeRequest", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkflowHead", "WorkflowHead")
                        .WithMany()
                        .HasForeignKey("WorkflowHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkflowHead");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetPeriodUser", b =>
                {
                    b.HasOne("vesa.core.Models.BudgetPeriod", "BudgetPeriod")
                        .WithMany("BudgetPeriodUsers")
                        .HasForeignKey("BudgetPeriodCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgetPeriod");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetManagement.BudgetPromotionRequest", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkflowHead", "WorkflowHead")
                        .WithMany()
                        .HasForeignKey("WorkflowHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkflowHead");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetPeriod", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Activity", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.CRM.Opportunity", "Opportunity")
                        .WithMany("Activities")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Customer", b =>
                {
                    b.HasOne("vesa.core.Models.Lookup.LookupItem", "CategoryItem")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Lookup.LookupItem", "CustomerTypeItem")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryItem");

                    b.Navigation("CustomerTypeItem");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerAddress", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerCustomField", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("CustomFields")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerDocument", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerEmail", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("SecondaryEmails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerNote", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerOfficial", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Officials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerPhone", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerSector", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Sectors")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.CustomerTag", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany("Tags")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Meeting", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.CRM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("MainClient");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Opportunity", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Quote", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.CRM.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("MainClient");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.QuoteLine", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.CRM.Quote", "Quote")
                        .WithMany("Lines")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Reminder", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.SpecialDay", b =>
                {
                    b.HasOne("vesa.core.Models.CRM.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Company", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "Client")
                        .WithMany("Companies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("vesa.core.Models.Departments", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.EmpSalary", b =>
                {
                    b.HasOne("vesa.core.Models.Employee", "Employee")
                        .WithMany("empSalary")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Employee", b =>
                {
                    b.HasOne("vesa.core.Models.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Form", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkFlowDefination", "WorkFlowDefination")
                        .WithOne("Form")
                        .HasForeignKey("vesa.core.Models.Form", "WorkFlowDefinationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkFlowDefination");
                });

            modelBuilder.Entity("vesa.core.Models.FormAssign", b =>
                {
                    b.HasOne("vesa.core.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("MainClient");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.FormAuth", b =>
                {
                    b.HasOne("vesa.core.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.FormRuleEngine", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkFlowDefination", "WorkFlowDefination")
                        .WithMany()
                        .HasForeignKey("WorkFlowDefinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("WorkFlowDefination");
                });

            modelBuilder.Entity("vesa.core.Models.FormRuntime", b =>
                {
                    b.HasOne("vesa.core.Models.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Inventory.Inventory", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "TicketDepartment")
                        .WithMany()
                        .HasForeignKey("TicketDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("TicketDepartment");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Lookup.LookupCategory", b =>
                {
                    b.HasOne("vesa.core.Models.Lookup.LookupModule", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Module");
                });

            modelBuilder.Entity("vesa.core.Models.Lookup.LookupItem", b =>
                {
                    b.HasOne("vesa.core.Models.Lookup.LookupCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("vesa.core.Models.MainClient", b =>
                {
                    b.HasOne("vesa.core.Models.UserApp", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("vesa.core.Models.Menu", b =>
                {
                    b.HasOne("vesa.core.Models.Menu", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("vesa.core.Models.NewFolder.Kanban", b =>
                {
                    b.HasOne("vesa.core.Models.UserApp", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.PCTracking.PCTrack", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Plant", b =>
                {
                    b.HasOne("vesa.core.Models.Company", "Company")
                        .WithMany("Plant")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("vesa.core.Models.Positions", b =>
                {
                    b.HasOne("vesa.core.Models.WorkCompany", "CustomerRef")
                        .WithMany()
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerRef");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Project", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.ProjectCategories", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.ProjectTasks", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.TicketProjects", "TicketProjects")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("TicketProjects");
                });

            modelBuilder.Entity("vesa.core.Models.RoleTenant", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.MainClient", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("vesa.core.Models.TaskManagement.UserCalendar", b =>
                {
                    b.HasOne("vesa.core.Models.WorkCompany", "CustomerRef")
                        .WithMany()
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerRef");

                    b.Navigation("MainClient");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.DepartmentUser", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "TicketDepartment")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("TicketDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "User")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("TicketDepartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketApprove", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Ticket.Tickets", "Tickets")
                        .WithOne("TicketApprove")
                        .HasForeignKey("vesa.core.Models.Ticket.TicketApprove", "TicketsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("Tickets");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketAssigne", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Ticket.TicketTeam", "TicketTeam")
                        .WithMany()
                        .HasForeignKey("TicketTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Ticket.Tickets", "Tickets")
                        .WithOne("TicketAssigne")
                        .HasForeignKey("vesa.core.Models.Ticket.TicketAssigne", "TicketsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("TicketTeam");

                    b.Navigation("Tickets");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketComment", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.Tickets", "Ticket")
                        .WithMany("TicketComment")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketDepartment", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithMany()
                        .HasForeignKey("WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");

                    b.Navigation("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketFile", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.TicketComment", "TicketComment")
                        .WithMany("Files")
                        .HasForeignKey("TicketCommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("TicketComment");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketNotifications", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.Tickets", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("Ticket");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketRuleEngine", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketTeam", b =>
                {
                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithMany()
                        .HasForeignKey("WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");

                    b.Navigation("MainClient");

                    b.Navigation("Manager");

                    b.Navigation("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketTeamUserApp", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.TicketTeam", "TicketTeam")
                        .WithMany("TeamList")
                        .HasForeignKey("TicketTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("TicketTeam");

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.Tickets", b =>
                {
                    b.HasOne("vesa.core.Models.WorkCompany", "CustomerRef")
                        .WithMany()
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "TicketDepartment")
                        .WithMany("tickets")
                        .HasForeignKey("TicketDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.TicketProjects", "TicketProject")
                        .WithMany()
                        .HasForeignKey("TicketProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserAppId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithMany()
                        .HasForeignKey("WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkCompanySystemInfo", "WorkCompanySystemInfo")
                        .WithMany()
                        .HasForeignKey("WorkCompanySystemInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.WorkflowHead", "WorkflowHead")
                        .WithMany()
                        .HasForeignKey("WorkflowHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CustomerRef");

                    b.Navigation("MainClient");

                    b.Navigation("TicketDepartment");

                    b.Navigation("TicketProject");

                    b.Navigation("UserApp");

                    b.Navigation("WorkCompany");

                    b.Navigation("WorkCompanySystemInfo");

                    b.Navigation("WorkflowHead");
                });

            modelBuilder.Entity("vesa.core.Models.TicketProjects", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.ProjectCategories", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithMany()
                        .HasForeignKey("WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("Manager");

                    b.Navigation("ProjectCategory");

                    b.Navigation("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.UserApp", b =>
                {
                    b.HasOne("vesa.core.Models.Departments", null)
                        .WithMany("employess")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.FormAuth", null)
                        .WithMany("Users")
                        .HasForeignKey("FormAuthId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Positions", "Positions")
                        .WithMany("UserApps")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.Ticket.TicketDepartment", "TicketDepartment")
                        .WithMany("employess")
                        .HasForeignKey("TicketDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithOne("UserApp")
                        .HasForeignKey("vesa.core.Models.UserApp", "WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Positions");

                    b.Navigation("TicketDepartment");

                    b.Navigation("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.UserTenant", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vesa.core.Models.UserTenantRole", b =>
                {
                    b.HasOne("vesa.core.Models.RoleTenant", "RoleTenant")
                        .WithMany()
                        .HasForeignKey("RoleTenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.UserApp", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RoleTenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompany", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkCompanyTicketMatris", null)
                        .WithMany("ToCompanies")
                        .HasForeignKey("WorkCompanyTicketMatrisId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.WorkFlowDefination", "WorkFlowDefination")
                        .WithMany()
                        .HasForeignKey("WorkFlowDefinationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkFlowDefination");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompanySystemInfo", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkCompany", "WorkCompany")
                        .WithMany()
                        .HasForeignKey("WorkCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MainClient");

                    b.Navigation("WorkCompany");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompanyTicketMatris", b =>
                {
                    b.HasOne("vesa.core.Models.WorkCompany", "FromCompany")
                        .WithMany()
                        .HasForeignKey("FromCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromCompany");

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.WorkFlowDefination", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowHead", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkFlowDefination", "WorkFlowDefination")
                        .WithMany("workflows")
                        .HasForeignKey("WorkFlowDefinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("WorkFlowDefination");
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowItem", b =>
                {
                    b.HasOne("vesa.core.Models.MainClient", "MainClient")
                        .WithMany()
                        .HasForeignKey("MainClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vesa.core.Models.WorkflowHead", "WorkflowHead")
                        .WithMany("workflowItems")
                        .HasForeignKey("WorkflowHeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainClient");

                    b.Navigation("WorkflowHead");
                });

            modelBuilder.Entity("vesa.core.Models.BudgetPeriod", b =>
                {
                    b.Navigation("BudgetPeriodUsers");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomFields");

                    b.Navigation("Documents");

                    b.Navigation("Notes");

                    b.Navigation("Officials");

                    b.Navigation("Phones");

                    b.Navigation("SecondaryEmails");

                    b.Navigation("Sectors");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Opportunity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("vesa.core.Models.CRM.Quote", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("vesa.core.Models.Company", b =>
                {
                    b.Navigation("Plant");
                });

            modelBuilder.Entity("vesa.core.Models.Departments", b =>
                {
                    b.Navigation("employess");
                });

            modelBuilder.Entity("vesa.core.Models.Employee", b =>
                {
                    b.Navigation("empSalary");
                });

            modelBuilder.Entity("vesa.core.Models.FormAuth", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("vesa.core.Models.MainClient", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("vesa.core.Models.Menu", b =>
                {
                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("vesa.core.Models.Positions", b =>
                {
                    b.Navigation("UserApps");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketComment", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketDepartment", b =>
                {
                    b.Navigation("DepartmentUsers");

                    b.Navigation("SubDepartments");

                    b.Navigation("employess");

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.TicketTeam", b =>
                {
                    b.Navigation("TeamList");
                });

            modelBuilder.Entity("vesa.core.Models.Ticket.Tickets", b =>
                {
                    b.Navigation("TicketApprove");

                    b.Navigation("TicketAssigne");

                    b.Navigation("TicketComment");
                });

            modelBuilder.Entity("vesa.core.Models.UserApp", b =>
                {
                    b.Navigation("DepartmentUsers");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompany", b =>
                {
                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("vesa.core.Models.WorkCompanyTicketMatris", b =>
                {
                    b.Navigation("ToCompanies");
                });

            modelBuilder.Entity("vesa.core.Models.WorkFlowDefination", b =>
                {
                    b.Navigation("Form");

                    b.Navigation("workflows");
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowHead", b =>
                {
                    b.Navigation("workflowItems");
                });

            modelBuilder.Entity("vesa.core.Models.WorkflowItem", b =>
                {
                    b.Navigation("approveItems");
                });
#pragma warning restore 612, 618
        }
    }
}
